AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  slack-timer AWS Resources

# Ref: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 128
    # Ref: https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
    Tracing: Active
    Runtime: go1.x

Resources:
  # API
  SetTimerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "set-timer"
      Description: "Set notification time called by Slack Event API"
      EndpointConfiguration:
        Types: [REGIONAL]

  # API - Deployment
  SetTimerDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SetTimerPost
    Properties:
      Description: "Production deployment"
      RestApiId: !Ref SetTimerApi
      StageName: "Prod"

  # API - Resource
  SetTimerParentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SetTimerApi
      ParentId: !GetAtt SetTimerApi.RootResourceId
      PathPart: callback
  SetTimerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SetTimerApi
      ParentId: !Ref SetTimerParentResource
      PathPart: '{proxy+}'

  # API - Resource - Method
  SetTimerPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        # Ref: Uri section in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt SetTimerFunction.Arn, "/invocations"]]
        #Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SetTimerFunction.Arn}/invocations
#        RequestTemplates:
#          application/json: "{\"body\":$input.json('$')}"
#        PassthroughBehavior: WHEN_NO_TEMPLATES
#        IntegrationResponses:
#          - StatusCode: 200
#            SelectionPattern: ""
#          - StatusCode: 500
#            SelectionPattern: ".*integration_status:500.*"
#            ContentHandling: CONVERT_TO_TEXT
#            ResponseParameters:
#              # Enclose single quote for using static value. Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration-integrationresponse.html#cfn-apigateway-method-integration-integrationresponse-responseparameters
#              method.response.header.X-Slack-No-Retry: "'1'"
#            ResponseTemplates:
#              application/json: "{\"message\":$input.json('$.message'),\"status\":$input('$.status'),\"detail\":$input('$.detail'),\"detail2\":$input('$')}"
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 500
          ResponseParameters:
            method.response.header.X-Slack-No-Retry: true
      ResourceId: !Ref SetTimerResource
      RestApiId: !Ref SetTimerApi

  # API - Lambda - Permission
  SetTimerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SetTimerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":", !Ref SetTimerApi, "/*"]]

  # API - Lambda
  SetTimerFunction:
    # Ref: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../../cmd/lambda/settimer
      Handler: settimer
      # Ref: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTimerTable
#      Environment:
#        DYNAMODB_TABLE: ""

  # CloudWatch - Lambda
  EnqueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../../cmd/lambda/enqueue
      Handler: enqueue
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTimerTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt NotifyQueue.QueueName
#      Environment:
#        DYNAMODB_TABLE: ""
#        SQS_URL: ""

  # CloudWatch - Lambda - Permission
  EnqueueFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnqueueFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EnqueueFunctionRule.Arn

  # CloudWatch - Schedule Rule
  EnqueueFunctionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Run EnqueueFunction Lambda
      Name: regular-execution-enqueue-function
      # Run every 1 minute
      ScheduleExpression: "cron(0/1 * * * ? *)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt EnqueueFunction.Arn
          Id: Id1

  # SQS
  NotifyQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: EventQueue.fifo
      ContentBasedDeduplication: true

  # SQS - Lambda
  NotifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../../cmd/lambda/notify
      Handler: notify
      # Ref: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NotifyQueue.Arn
            BatchSize: 10
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref EventTimerTable
        - SQSPollerPolicy:
            QueueName: !Ref NotifyQueue

  # SQS - Lambda - Permission
  NotifyFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NotifyFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt NotifyQueue.Arn

  # DynamoDB
  EventTimerTable:
    # Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: NotificationTime
          AttributeType: S
        - AttributeName: Dummy
          AttributeType: N
      BillingMode: PROVISIONED
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: event
      # Ref: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-gsi.html
      GlobalSecondaryIndexes:
        - IndexName: TimeIndex
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
          KeySchema:
            # Because of sorting NotificationTime.
            - AttributeName: Dummy
              KeyType: HASH
            - AttributeName: NotificationTime
              KeyType: RANGE
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes: ["State"]

Outputs:
  # Ref: https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SetTimerAPI:
    Description: "API Gateway endpoint URL for Prod environment for Slack Event API callback."
    Value: !Sub "https://${SetTimerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  SetTimerFunction:
    Description: "SetTimer Function ARN"
    Value: !GetAtt SetTimerFunction.Arn
  EnqueueFunction:
    Description: "Enqueue Function ARN"
    Value: !GetAtt SetTimerFunction.Arn
#  NotifyFunction:
#    Description: "Notify Function ARN"
#    Value: !GetAtt NotifyFunction.Arn
  EventTable:
    Description: "Event Table ARN"
    Value: !GetAtt EventTimerTable.Arn
