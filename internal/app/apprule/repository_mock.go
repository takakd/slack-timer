// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/apprule/repository.go

// Package apprule is a generated GoMock package.
package apprule

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	enterpriserule "proteinreminder/internal/app/enterpriserule"
	reflect "reflect"
	time "time"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindProteinEvent mocks base method
func (m *MockRepository) FindProteinEvent(ctx context.Context, userId string) (*enterpriserule.ProteinEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProteinEvent", ctx, userId)
	ret0, _ := ret[0].(*enterpriserule.ProteinEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProteinEvent indicates an expected call of FindProteinEvent
func (mr *MockRepositoryMockRecorder) FindProteinEvent(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProteinEvent", reflect.TypeOf((*MockRepository)(nil).FindProteinEvent), ctx, userId)
}

// FindProteinEventByTime mocks base method
func (m *MockRepository) FindProteinEventByTime(ctx context.Context, from, to time.Time) ([]*enterpriserule.ProteinEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProteinEventByTime", ctx, from, to)
	ret0, _ := ret[0].([]*enterpriserule.ProteinEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProteinEventByTime indicates an expected call of FindProteinEventByTime
func (mr *MockRepositoryMockRecorder) FindProteinEventByTime(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProteinEventByTime", reflect.TypeOf((*MockRepository)(nil).FindProteinEventByTime), ctx, from, to)
}

// SaveProteinEvent mocks base method
func (m *MockRepository) SaveProteinEvent(ctx context.Context, events []*enterpriserule.ProteinEvent) ([]*enterpriserule.ProteinEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProteinEvent", ctx, events)
	ret0, _ := ret[0].([]*enterpriserule.ProteinEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProteinEvent indicates an expected call of SaveProteinEvent
func (mr *MockRepositoryMockRecorder) SaveProteinEvent(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProteinEvent", reflect.TypeOf((*MockRepository)(nil).SaveProteinEvent), ctx, events)
}
