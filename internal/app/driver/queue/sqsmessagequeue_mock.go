// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/driver/queue/sqsmessagequeue.go

// Package queue is a generated GoMock package.
package queue

import (
	sqs "github.com/aws/aws-sdk-go/service/sqs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSQSWrapper is a mock of SQSWrapper interface
type MockSQSWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockSQSWrapperMockRecorder
}

// MockSQSWrapperMockRecorder is the mock recorder for MockSQSWrapper
type MockSQSWrapperMockRecorder struct {
	mock *MockSQSWrapper
}

// NewMockSQSWrapper creates a new mock instance
func NewMockSQSWrapper(ctrl *gomock.Controller) *MockSQSWrapper {
	mock := &MockSQSWrapper{ctrl: ctrl}
	mock.recorder = &MockSQSWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQSWrapper) EXPECT() *MockSQSWrapperMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockSQSWrapper) SendMessage(input *sqs.SendMessageInput) (*sqs.SendMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", input)
	ret0, _ := ret[0].(*sqs.SendMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockSQSWrapperMockRecorder) SendMessage(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSQSWrapper)(nil).SendMessage), input)
}
