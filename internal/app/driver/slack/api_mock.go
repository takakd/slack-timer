// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/slack/api.go

// Package slack is a generated GoMock package.
package slack

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ConversationsOpen mocks base method
func (m *MockAPI) ConversationsOpen(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationsOpen", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationsOpen indicates an expected call of ConversationsOpen
func (mr *MockAPIMockRecorder) ConversationsOpen(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationsOpen", reflect.TypeOf((*MockAPI)(nil).ConversationsOpen), userID)
}

// ChatPostMessage mocks base method
func (m *MockAPI) ChatPostMessage(channelID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatPostMessage", channelID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatPostMessage indicates an expected call of ChatPostMessage
func (mr *MockAPIMockRecorder) ChatPostMessage(channelID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatPostMessage", reflect.TypeOf((*MockAPI)(nil).ChatPostMessage), channelID, message)
}
