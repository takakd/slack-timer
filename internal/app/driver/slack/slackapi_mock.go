// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/driver/slack/slackapi.go

// Package slack is a generated GoMock package.
package slack

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSlackApi is a mock of SlackApi interface
type MockSlackApi struct {
	ctrl     *gomock.Controller
	recorder *MockSlackApiMockRecorder
}

// MockSlackApiMockRecorder is the mock recorder for MockSlackApi
type MockSlackApiMockRecorder struct {
	mock *MockSlackApi
}

// NewMockSlackApi creates a new mock instance
func NewMockSlackApi(ctrl *gomock.Controller) *MockSlackApi {
	mock := &MockSlackApi{ctrl: ctrl}
	mock.recorder = &MockSlackApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlackApi) EXPECT() *MockSlackApiMockRecorder {
	return m.recorder
}

// ConversationsOpen mocks base method
func (m *MockSlackApi) ConversationsOpen(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConversationsOpen", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConversationsOpen indicates an expected call of ConversationsOpen
func (mr *MockSlackApiMockRecorder) ConversationsOpen(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConversationsOpen", reflect.TypeOf((*MockSlackApi)(nil).ConversationsOpen), userId)
}

// ChatPostMessage mocks base method
func (m *MockSlackApi) ChatPostMessage(channelId, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatPostMessage", channelId, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChatPostMessage indicates an expected call of ChatPostMessage
func (mr *MockSlackApiMockRecorder) ChatPostMessage(channelId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatPostMessage", reflect.TypeOf((*MockSlackApi)(nil).ChatPostMessage), channelId, message)
}
