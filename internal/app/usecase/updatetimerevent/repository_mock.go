// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/usecase/updatetimerevent/repository.go

// Package updatetimerevent is a generated GoMock package.
package updatetimerevent

import (
	context "context"
	reflect "reflect"
	enterpriserule "slacktimer/internal/app/enterpriserule"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// FindTimerEvent mocks base method
func (m *MockRepository) FindTimerEvent(ctx context.Context, userID string) (*enterpriserule.TimerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTimerEvent", ctx, userID)
	ret0, _ := ret[0].(*enterpriserule.TimerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTimerEvent indicates an expected call of FindTimerEvent
func (mr *MockRepositoryMockRecorder) FindTimerEvent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTimerEvent", reflect.TypeOf((*MockRepository)(nil).FindTimerEvent), ctx, userID)
}

// FindTimerEventByTime mocks base method
func (m *MockRepository) FindTimerEventByTime(ctx context.Context, from, to time.Time) ([]*enterpriserule.TimerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTimerEventByTime", ctx, from, to)
	ret0, _ := ret[0].([]*enterpriserule.TimerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTimerEventByTime indicates an expected call of FindTimerEventByTime
func (mr *MockRepositoryMockRecorder) FindTimerEventByTime(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTimerEventByTime", reflect.TypeOf((*MockRepository)(nil).FindTimerEventByTime), ctx, from, to)
}

// SaveTimerEvent mocks base method
func (m *MockRepository) SaveTimerEvent(ctx context.Context, event *enterpriserule.TimerEvent) (*enterpriserule.TimerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTimerEvent", ctx, event)
	ret0, _ := ret[0].(*enterpriserule.TimerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTimerEvent indicates an expected call of SaveTimerEvent
func (mr *MockRepositoryMockRecorder) SaveTimerEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTimerEvent", reflect.TypeOf((*MockRepository)(nil).SaveTimerEvent), ctx, event)
}
