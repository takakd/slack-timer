// Code generated by MockGen. DO NOT EDIT.
// Source: ./replier.go

// Package timeronevent is a generated GoMock package.
package timeronevent

import (
	reflect "reflect"
	appcontext "slacktimer/internal/app/util/appcontext"

	gomock "github.com/golang/mock/gomock"
)

// MockReplier is a mock of Replier interface
type MockReplier struct {
	ctrl     *gomock.Controller
	recorder *MockReplierMockRecorder
}

// MockReplierMockRecorder is the mock recorder for MockReplier
type MockReplierMockRecorder struct {
	mock *MockReplier
}

// NewMockReplier creates a new mock instance
func NewMockReplier(ctrl *gomock.Controller) *MockReplier {
	mock := &MockReplier{ctrl: ctrl}
	mock.recorder = &MockReplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplier) EXPECT() *MockReplierMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockReplier) SendMessage(ac appcontext.AppContext, userID, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ac, userID, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockReplierMockRecorder) SendMessage(ac, userID, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockReplier)(nil).SendMessage), ac, userID, text)
}
