// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllerhandler.go

// Package notify is a generated GoMock package.
package notify

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockControllerHandler is a mock of ControllerHandler interface
type MockControllerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockControllerHandlerMockRecorder
}

// MockControllerHandlerMockRecorder is the mock recorder for MockControllerHandler
type MockControllerHandlerMockRecorder struct {
	mock *MockControllerHandler
}

// NewMockControllerHandler creates a new mock instance
func NewMockControllerHandler(ctrl *gomock.Controller) *MockControllerHandler {
	mock := &MockControllerHandler{ctrl: ctrl}
	mock.recorder = &MockControllerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockControllerHandler) EXPECT() *MockControllerHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockControllerHandler) Handle(ctx context.Context, input HandleInput) *Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, input)
	ret0, _ := ret[0].(*Response)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockControllerHandlerMockRecorder) Handle(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockControllerHandler)(nil).Handle), ctx, input)
}
