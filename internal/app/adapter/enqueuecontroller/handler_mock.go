// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/adapter/enqueuecontroller/handler.go

// Package enqueuecontroller is a generated GoMock package.
package enqueuecontroller

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method
func (m *MockHandler) Handler(ctx context.Context, input HandlerInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handler", ctx, input)
}

// Handler indicates an expected call of Handler
func (mr *MockHandlerMockRecorder) Handler(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHandler)(nil).Handler), ctx, input)
}
