// Code generated by MockGen. DO NOT EDIT.
// Source: ./oneventhandlerfunctor.go

// Package settime is a generated GoMock package.
package settime

import (
	reflect "reflect"
	appcontext "slacktimer/internal/app/util/appcontext"

	gomock "github.com/golang/mock/gomock"
)

// MockOnEventHandler is a mock of OnEventHandler interface
type MockOnEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOnEventHandlerMockRecorder
}

// MockOnEventHandlerMockRecorder is the mock recorder for MockOnEventHandler
type MockOnEventHandlerMockRecorder struct {
	mock *MockOnEventHandler
}

// NewMockOnEventHandler creates a new mock instance
func NewMockOnEventHandler(ctrl *gomock.Controller) *MockOnEventHandler {
	mock := &MockOnEventHandler{ctrl: ctrl}
	mock.recorder = &MockOnEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOnEventHandler) EXPECT() *MockOnEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockOnEventHandler) Handle(ac appcontext.AppContext, data EventCallbackData) *Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ac, data)
	ret0, _ := ret[0].(*Response)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockOnEventHandlerMockRecorder) Handle(ac, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockOnEventHandler)(nil).Handle), ac, data)
}
