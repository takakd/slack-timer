// Code generated by MockGen. DO NOT EDIT.
// Source: ./urlverificationhandlerfunctor.go

// Package settime is a generated GoMock package.
package settime

import (
	reflect "reflect"
	appcontext "slacktimer/internal/app/util/appcontext"

	gomock "github.com/golang/mock/gomock"
)

// MockURLVerificationRequestHandler is a mock of URLVerificationRequestHandler interface
type MockURLVerificationRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockURLVerificationRequestHandlerMockRecorder
}

// MockURLVerificationRequestHandlerMockRecorder is the mock recorder for MockURLVerificationRequestHandler
type MockURLVerificationRequestHandlerMockRecorder struct {
	mock *MockURLVerificationRequestHandler
}

// NewMockURLVerificationRequestHandler creates a new mock instance
func NewMockURLVerificationRequestHandler(ctrl *gomock.Controller) *MockURLVerificationRequestHandler {
	mock := &MockURLVerificationRequestHandler{ctrl: ctrl}
	mock.recorder = &MockURLVerificationRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLVerificationRequestHandler) EXPECT() *MockURLVerificationRequestHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockURLVerificationRequestHandler) Handle(ac appcontext.AppContext, data EventCallbackData) *Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ac, data)
	ret0, _ := ret[0].(*Response)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockURLVerificationRequestHandlerMockRecorder) Handle(ac, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockURLVerificationRequestHandler)(nil).Handle), ac, data)
}
